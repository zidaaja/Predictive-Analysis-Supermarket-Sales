# -*- coding: utf-8 -*-
"""Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OnNASba01j2nP7UUlefM9aN38vtEeTRg

Import seluruh file dan Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import scipy as sp
import warnings
import datetime
warnings.filterwarnings("ignore")
# %matplotlib inline

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

"""# Load the Dataset"""

data = pd.read_csv("/tmp/supermarket_sales - Sheet1.csv")
data

"""Terdapat 1000 data dengan 17 columns"""

data['Date'] = pd.to_datetime(data['Date'])

data['year'] = data['Date'].dt.year
data['month'] = data['Date'].dt.month
data['day'] = data['Date'].dt.day_name()

"""Diatas untuk membagi tanggal menjadi Tahun, bulan, dan hari

# Explanatory Data Analysis

Mencek apakah terdapat data yang bernilai NULL:
"""

data.isnull().sum()

"""Tidak ada data yang bernilai NULL

Mengecek deskripsi statistik pada dataset:
"""

data.describe()

"""Mengecek informasi dataset:"""

data.info()

"""Mengecek apakah variabel atau fitur gross income berisi missing value:"""

gi = (data['gross income'] == 0).sum()
print(gi)

"""# Univariate Analysis

Membagi fitur numerik dan kategorikal pada dataset:
"""

numerical_features = ['Unit price', 'Quantity', 'Tax 5%', 'Total', 'cogs', 'gross margin percentage', 'gross income', 'Rating', 'year', 'month']
categorical_features = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Time', 'Payment', 'day']

#categorical fitur Branch
feature = categorical_features[0]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur City
feature = categorical_features[1]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur Customer type
feature = categorical_features[2]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur Gender
feature = categorical_features[3]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur Product line
feature = categorical_features[4]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur Time
feature = categorical_features[5]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur Payment
feature = categorical_features[6]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#categorical fitur day
feature = categorical_features[7]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#Numeric Fitur
data.hist(bins=50, figsize=(15,15))
plt.show()

"""Yang menjadi target analisis ialah variabel "gross income"
Pada histogram "gross income" terdapat informasi mengenai peningkatan pendapatan kotor sebanding dengan penurunan jumlah sampel.

# Multivariate Analysis

Mengecek rata-rata Pendapatan kotor terhadap masing-masing fitur untuk mengetahui pengaruh fitur kategori terhadap pendapatan kotor:
"""

#categorical fitur
cat_features = data.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="gross income", kind="bar", dodge=False, height = 4, aspect = 3,  data=data, palette="Set3")
  plt.title("Rata-rata 'gross income' Relatif terhadap - {}".format(col))

"""Dapat dilihat bahwa rata-rata seluruh fitur tidak memiliki dampak yang besar terhadap gross income atau pendapatan kotor"""

#Numeric fitur
sns.pairplot(data, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""# Data Preparation

Encoding fitur kategori menggunakan One-hot-encoding:
"""

from sklearn.preprocessing import  OneHotEncoder
data = pd.concat([data, pd.get_dummies(data['Branch'], prefix='Branch')],axis=1)
data = pd.concat([data, pd.get_dummies(data['City'], prefix='City')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Customer type'], prefix='Customer type')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Gender'], prefix='Gender')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Product line'], prefix='Product line')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Time'], prefix='Time')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Payment'], prefix='Payment')],axis=1)
data = pd.concat([data, pd.get_dummies(data['day'], prefix='day')],axis=1)
data.drop(['Branch','City','Customer type', 'Gender', 'Product line', 'Time', 'Payment', 'day'], axis=1, inplace=True)
data.head()

"""Kolom Tax, Total, dan cogs yang memiliki korelasi yang tinggi sehingga perlu melakukan Reduksi Dimensi dengan PCA:"""

sns.pairplot(data[['Tax 5%','Total','cogs']], plot_kws={"s": 3});

pca = PCA(n_components=3, random_state=123)
pca.fit(data[['Tax 5%','Total','cogs']])
princ_comp = pca.transform(data[['Tax 5%','Total','cogs']])

pca.explained_variance_ratio_.round(3)

"""Membagi data train dan data test:"""

X = data.drop(["gross income", "Date", "Invoice ID"],axis =1)
y = data["gross income"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

data

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""# Standarisasi"""

numerical_features = ['Unit price', 'Quantity', 'Tax 5%','Total','cogs']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""# Modelling"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# Model Evaluation

Scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1:
"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""Mengevaluasi ketiga model:"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

"""visualisasi metrik MSE:"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)